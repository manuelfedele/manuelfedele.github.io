<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>http on Git Push and Run</title>
    <link>https://manuelfedele.github.io/tags/http/</link>
    <description>Recent content in http on Git Push and Run</description>
    <image>
      <title>Git Push and Run</title>
      <url>https://manuelfedele.github.io/img/card-pillow.jpg</url>
      <link>https://manuelfedele.github.io/img/card-pillow.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Dec 2022 19:14:21 +0100</lastBuildDate><atom:link href="https://manuelfedele.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Create a Webserver in Golang</title>
      <link>https://manuelfedele.github.io/posts/how-to-create-a-webserver-in-golang/</link>
      <pubDate>Sun, 11 Dec 2022 19:14:21 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/how-to-create-a-webserver-in-golang/</guid>
      <description>To create a web server in Go, you can use the http package provided by the standard library. This package includes the http.Server type, which represents an HTTP server, and the http.ListenAndServe() function, which listens for incoming HTTP requests on a specified port and serves responses to those requests.
Here is an example of how you might create a simple web server in Go:
// Import the http package import &amp;#34;net/http&amp;#34; // Define a function that will be called to handle incoming HTTP requests func handler(w http.</description>
    </item>
    
  </channel>
</rss>
