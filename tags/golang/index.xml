<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>golang on Git Push and Run</title>
    <link>https://manuelfedele.github.io/tags/golang/</link>
    <description>Recent content in golang on Git Push and Run</description>
    <image>
      <url>https://manuelfedele.github.io/img/card-pillow.jpg</url>
      <link>https://manuelfedele.github.io/img/card-pillow.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 19 Jan 2023 21:33:41 +0100</lastBuildDate><atom:link href="https://manuelfedele.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Evaluate Chess Position With Golang</title>
      <link>https://manuelfedele.github.io/posts/evaluate-chess-position-with-golang/</link>
      <pubDate>Thu, 19 Jan 2023 21:33:41 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/evaluate-chess-position-with-golang/</guid>
      <description>Evaluating chess positions is an important part of chess strategy and can help players make more informed decisions about which moves to make. In this blog post, we&amp;rsquo;ll look at how to use the powerful Stockfish chess engine and the Go programming language to evaluate chess positions.
Installing Stockfish Before we can start using Stockfish, we need to install it. On Linux and macOS, you can install Stockfish using the package manager of your choice (e.</description>
    </item>
    
    <item>
      <title>The Memoization Technique</title>
      <link>https://manuelfedele.github.io/posts/the-memoization-technique/</link>
      <pubDate>Mon, 16 Jan 2023 21:07:26 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/the-memoization-technique/</guid>
      <description>Memoization is a technique that is used to speed up the execution of a function by storing the results of expensive function calls and returning the cached result when the same input occurs again. This can be particularly useful for algorithms that have a large number of recursive calls or for functions that are called multiple times with the same input.
In Go, it is easy to implement memoization using a simple map.</description>
    </item>
    
    <item>
      <title>Trading With Alpaca and Golang</title>
      <link>https://manuelfedele.github.io/posts/trading-with-alpaca-and-golang/</link>
      <pubDate>Sun, 15 Jan 2023 19:24:09 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/trading-with-alpaca-and-golang/</guid>
      <description>Alpaca is a popular platform for automated trading, offering APIs for accessing real-time market data and placing trades. In this article, we will discuss how to use Alpaca&amp;rsquo;s APIs with Golang, a popular programming language known for its simplicity, performance, and concurrency support.
Before we dive into the details of using Alpaca&amp;rsquo;s APIs with Golang, let&amp;rsquo;s first understand the requirements of the application.
Requirements The application should be able to connect to the Alpaca API and authenticate the user.</description>
    </item>
    
    <item>
      <title>Unit Testing in Golang</title>
      <link>https://manuelfedele.github.io/posts/unit-testing-in-golang/</link>
      <pubDate>Mon, 09 Jan 2023 20:49:03 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/unit-testing-in-golang/</guid>
      <description>Unit testing is a software testing technique in which individual units (smallest testable parts) of a software application are tested in isolation from the rest of the application. The goal of unit testing is to validate that each unit of the application is working as intended and meets the specified requirements.
In Go, the testing package provides support for writing unit tests. To write unit tests, you need to create a file with a name that ends in _test.</description>
    </item>
    
    <item>
      <title>Streaming Video With Golang</title>
      <link>https://manuelfedele.github.io/posts/streaming-video-with-golang/</link>
      <pubDate>Wed, 04 Jan 2023 21:23:20 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/streaming-video-with-golang/</guid>
      <description>Streaming video with Go (Golang) is a popular choice for building efficient and scalable video streaming applications. In this blog post, we&amp;rsquo;ll discuss some of the key concepts and considerations for building a video streaming application with Go.
One of the first things to consider when building a video streaming application is the underlying video format. Go has built-in support for working with a variety of video formats, including MP4, FLV, and AVI.</description>
    </item>
    
    <item>
      <title>The Context Package</title>
      <link>https://manuelfedele.github.io/posts/the-context-package/</link>
      <pubDate>Tue, 03 Jan 2023 20:36:29 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/the-context-package/</guid>
      <description>Context in Go is a type that carries a request-scoped value across API boundaries. It is designed to be used in long-lived requests, such as an HTTP server handling multiple requests over the lifetime of a process.
One of the primary use cases of context is to cancel long-running operations. For example, if an HTTP server receives a request with a cancelation token, it can use that token to cancel the request if the client closes the connection.</description>
    </item>
    
    <item>
      <title>Use Protobuf With Golang</title>
      <link>https://manuelfedele.github.io/posts/use-protobuf-with-golang/</link>
      <pubDate>Tue, 27 Dec 2022 18:48:44 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/use-protobuf-with-golang/</guid>
      <description>Protocol Buffers (Protobuf) is a language- and platform-neutral data serialization format developed by Google. It allows you to define data structures in a .proto file and then use code generation tools to generate code in various languages for working with those data structures.
To use Protobuf with Go, you&amp;rsquo;ll need to do the following:
Install the Protobuf compiler (protoc) and the Go Protobuf plugin:
# Install protoc wget https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip unzip protoc-3.</description>
    </item>
    
    <item>
      <title>Create Command Line Application With Golang</title>
      <link>https://manuelfedele.github.io/posts/create-command-line-application-with-golang/</link>
      <pubDate>Tue, 20 Dec 2022 10:03:30 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-command-line-application-with-golang/</guid>
      <description>Creating a Command Line Application to Separate Files by Extension in Go If you have a folder with a large number of files and you want to organize them by file extension, you can create a command line application to do this automatically using Go. Go, also known as Golang, is a programming language developed by Google that is designed to be fast, statically-typed, and easy to learn. In this article, we&amp;rsquo;ll walk through the steps to create a Go program that separates files in a given folder into subfolders based on their extension.</description>
    </item>
    
    <item>
      <title>Use Redis With Golang</title>
      <link>https://manuelfedele.github.io/posts/use-redis-with-golang/</link>
      <pubDate>Mon, 19 Dec 2022 19:32:27 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/use-redis-with-golang/</guid>
      <description>Using Golang and Redis Redis is an in-memory data structure store that can be used as a database, cache, and message broker. It is known for its speed, simplicity, and flexibility. In this article, we will discuss how to use Redis with Golang, a popular programming language known for its simplicity, performance, and concurrency support.
Before we dive into the details of using Redis with Golang, let&amp;rsquo;s first understand the requirements of the application.</description>
    </item>
    
    <item>
      <title>Create Desktop Application to fetch Stock Market Data  with Golang</title>
      <link>https://manuelfedele.github.io/posts/create-desktop-application-stock-market-data-golang/</link>
      <pubDate>Mon, 19 Dec 2022 19:08:58 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-desktop-application-stock-market-data-golang/</guid>
      <description>Golang, also known as Go, is a popular programming language known for its simplicity, performance, and concurrency support. Fyne is an open-source cross-platform UI toolkit written in Go, which makes it an excellent choice for building desktop applications. In this article, we will discuss how to build a desktop application for stock market data using Golang and Fyne.
Before we dive into the details of building the application, let&amp;rsquo;s first understand the requirements of the application.</description>
    </item>
    
    <item>
      <title>How to Create a Webserver in Golang</title>
      <link>https://manuelfedele.github.io/posts/how-to-create-a-webserver-in-golang/</link>
      <pubDate>Sun, 11 Dec 2022 19:14:21 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/how-to-create-a-webserver-in-golang/</guid>
      <description>To create a web server in Go, you can use the http package provided by the standard library. This package includes the http.Server type, which represents an HTTP server, and the http.ListenAndServe() function, which listens for incoming HTTP requests on a specified port and serves responses to those requests.
Here is an example of how you might create a simple web server in Go:
// Import the http package import &amp;#34;net/http&amp;#34; // Define a function that will be called to handle incoming HTTP requests func handler(w http.</description>
    </item>
    
    <item>
      <title>How to Use Interfaces in Golang</title>
      <link>https://manuelfedele.github.io/posts/how-to-use-interfaces-in-golang/</link>
      <pubDate>Sun, 11 Dec 2022 19:04:27 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/how-to-use-interfaces-in-golang/</guid>
      <description>In Go, an interface is a type that defines a set of methods that a struct must implement in order to implement the interface. An interface defines the behavior or capabilities of a struct without specifying the implementation details. This allows different structs to implement the same interface in different ways, promoting loose coupling and flexibility in your code.
Here is an example of an interface in Go:
// Define an interface named Animal type Animal interface { // Define a method named Speak that takes no arguments and returns a string Speak() string } In this example, the Animal interface defines a single method named Speak(), which takes no arguments and returns a string.</description>
    </item>
    
    <item>
      <title>Implement Factory Design Pattern in Golang</title>
      <link>https://manuelfedele.github.io/posts/implement-factory-design-pattern-golang/</link>
      <pubDate>Sun, 11 Dec 2022 18:57:13 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/implement-factory-design-pattern-golang/</guid>
      <description>To implement the factory design pattern in Go, you can create a factory function that returns an object that implements a common interface. This function can take parameters to specify the type of object to be created. Here is an example of how you might implement the factory design pattern in Go:
// Define an interface that the factory will create objects for type Animal interface { Speak() string } // Define a factory function that returns an object that implements the Animal interface func NewAnimal(animalType string) Animal { switch animalType { case &amp;#34;dog&amp;#34;: return &amp;amp;Dog{} case &amp;#34;cat&amp;#34;: return &amp;amp;Cat{} default: return nil } } // Define a struct for a dog that implements the Animal interface type Dog struct{} func (d *Dog) Speak() string { return &amp;#34;Woof!</description>
    </item>
    
  </channel>
</rss>
