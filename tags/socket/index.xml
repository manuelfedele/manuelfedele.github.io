<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Socket on Git Push and Run</title>
    <link>https://manuelfedele.github.io/tags/socket/</link>
    <description>Recent content in Socket on Git Push and Run</description>
    <image>
      <title>Git Push and Run</title>
      <url>https://manuelfedele.github.io/img/card-pillow.jpg</url>
      <link>https://manuelfedele.github.io/img/card-pillow.jpg</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 29 Jan 2023 18:44:12 +0100</lastBuildDate>
    <atom:link href="https://manuelfedele.github.io/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Socket Messaging With Golang</title>
      <link>https://manuelfedele.github.io/posts/socket-messaging-with-golang/</link>
      <pubDate>Sun, 29 Jan 2023 18:44:12 +0100</pubDate>
      <guid>https://manuelfedele.github.io/posts/socket-messaging-with-golang/</guid>
      <description>&lt;p&gt;Socket messaging allows two or more processes to communicate with each other over a network by sending and receiving messages through a socket connection. In this article, we&amp;rsquo;ll look at how to use Go to implement socket messaging between two processes.&lt;/p&gt;
&lt;p&gt;Setting up the Socket Server
The first step in implementing socket messaging is to set up a socket server that listens for incoming connections and processes incoming messages. To do this in Go, we&amp;rsquo;ll need to use the net package to create a socket server and handle incoming connections.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
