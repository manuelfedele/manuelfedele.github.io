<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git Push and Run</title>
    <link>https://manuelfedele.github.io/</link>
    <description>Recent content on Git Push and Run</description>
    <image>
      <title>Git Push and Run</title>
      <url>https://manuelfedele.github.io/img/card-pillow.jpg</url>
      <link>https://manuelfedele.github.io/img/card-pillow.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jul 2023 08:42:00 +0200</lastBuildDate><atom:link href="https://manuelfedele.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aws Opensearch as Monitoring Tool</title>
      <link>https://manuelfedele.github.io/posts/aws-opensearch-as-monitoring-tool/</link>
      <pubDate>Wed, 12 Jul 2023 08:42:00 +0200</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/aws-opensearch-as-monitoring-tool/</guid>
      <description>Cross-Account Logging: Shipping AWS Lambda Logs to OpenSearch In today&amp;rsquo;s distributed systems, logging and monitoring play a crucial role in detecting anomalies and ensuring system health. AWS Lambda and OpenSearch are often paired to deliver efficient, scalable logging solutions. However, complexities can arise when these resources live in separate AWS accounts. This blog post will guide you through the process of sending AWS Lambda logs from Account A to an OpenSearch cluster in Account B using Terraform as the Infrastructure as Code (IAC) tool and GitLab for CI/CD pipelines.</description>
    </item>
    
    <item>
      <title>The Single Responsibility Principle</title>
      <link>https://manuelfedele.github.io/posts/the-single-responsibility-principle/</link>
      <pubDate>Tue, 21 Mar 2023 15:10:03 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/the-single-responsibility-principle/</guid>
      <description>The Single Responsibility Principle (SRP) is a software design principle that states that a software module or component should have only one reason to change. This means that a module or component should have a single, narrowly defined responsibility and all of its features should be related to that responsibility.
In Go, the SRP can be applied at both the package and the function level.
At the package level, it&amp;rsquo;s important to consider what a package should be responsible for.</description>
    </item>
    
    <item>
      <title>Schedule Github Action With Cron</title>
      <link>https://manuelfedele.github.io/posts/schedule-github-action-with-cron/</link>
      <pubDate>Sun, 12 Mar 2023 15:03:40 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/schedule-github-action-with-cron/</guid>
      <description>Cron scheduling is a useful feature in GitHub Actions that allows you to run a workflow on a schedule. This can be useful for tasks such as running tests or deploying code at regular intervals.
To use cron scheduling in GitHub Actions, you will need to add a schedule key to your workflow file. The schedule key should contain a cron expression that specifies when the workflow should run.
Here is an example of a workflow that runs every day at noon:</description>
    </item>
    
    <item>
      <title>How to Delete Git Branch Locally</title>
      <link>https://manuelfedele.github.io/posts/how-to-delete-git-branch-locally/</link>
      <pubDate>Tue, 07 Mar 2023 17:14:30 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/how-to-delete-git-branch-locally/</guid>
      <description>To delete a Git branch locally, you can use the git branch command with the -d flag, followed by the name of the branch you want to delete. For example:
git branch -d branch_name This will delete the specified branch if it has already been fully merged into the current branch. If the branch has not been fully merged, you can use the -D flag instead, which will force the deletion of the branch.</description>
    </item>
    
    <item>
      <title>How to Undo Most Recent Local Git Commit</title>
      <link>https://manuelfedele.github.io/posts/how-to-undo-most-recent-local-git-commit/</link>
      <pubDate>Tue, 28 Feb 2023 17:09:02 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/how-to-undo-most-recent-local-git-commit/</guid>
      <description>Git is a version control system that allows developers to track changes to their codebase and collaborate with others. One of the useful features of Git is the ability to revert changes that have been made to the codebase. In this article, we will look at how to undo the most recent local commits in Git.
There are several ways to undo commits in Git, and the method you choose will depend on your specific needs.</description>
    </item>
    
    <item>
      <title>Implement Desing Patterns With Golang</title>
      <link>https://manuelfedele.github.io/posts/implement-desing-patterns-with-golang/</link>
      <pubDate>Tue, 21 Feb 2023 13:16:06 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/implement-desing-patterns-with-golang/</guid>
      <description>Design patterns are reusable solutions to common software design problems. They are a way to structure and organize code in a way that makes it easier to understand, maintain, and extend. In this article, we&amp;rsquo;ll explore how to implement some popular design patterns in Go.
Singleton pattern The singleton pattern is a creational design pattern that ensures a class has only one instance and provides a global access point to it.</description>
    </item>
    
    <item>
      <title>Nats Messaging With Golang</title>
      <link>https://manuelfedele.github.io/posts/nats-messaging-with-golang/</link>
      <pubDate>Mon, 13 Feb 2023 18:57:15 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/nats-messaging-with-golang/</guid>
      <description>NATS Messaging with Golang NATS is a high-performance, lightweight messaging system that is widely used for building distributed systems. It is designed to be simple, fast, and easy to use, making it a popular choice for many developers. In this tutorial, we will learn how to use NATS with Golang to send and receive messages.
Setting up NATS To use NATS with Golang, we first need to install the NATS server and client libraries.</description>
    </item>
    
    <item>
      <title>Build a Sudoku Solver in Golang</title>
      <link>https://manuelfedele.github.io/posts/build-a-sudoku-solver-in-golang/</link>
      <pubDate>Wed, 01 Feb 2023 21:09:26 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/build-a-sudoku-solver-in-golang/</guid>
      <description>Sudoku Solver in Go: A Beginner&amp;rsquo;s Guide and Optimization Techniques The game of Sudoku has always been a popular pastime for many. Whether you&amp;rsquo;re an absolute novice or a seasoned veteran, the challenge of filling out a 9x9 grid with digits so that each column, each row, and each of the nine 3x3 subgrids contains all of the digits from 1 to 9, is an appealing task. Today, we&amp;rsquo;re going to see how we can automate this process in Golang, and how we can optimize it using memoization techniques.</description>
    </item>
    
    <item>
      <title>Socket Messaging With Golang</title>
      <link>https://manuelfedele.github.io/posts/socket-messaging-with-golang/</link>
      <pubDate>Sun, 29 Jan 2023 18:44:12 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/socket-messaging-with-golang/</guid>
      <description>Socket messaging allows two or more processes to communicate with each other over a network by sending and receiving messages through a socket connection. In this article, we&amp;rsquo;ll look at how to use Go to implement socket messaging between two processes.
Setting up the Socket Server The first step in implementing socket messaging is to set up a socket server that listens for incoming connections and processes incoming messages. To do this in Go, we&amp;rsquo;ll need to use the net package to create a socket server and handle incoming connections.</description>
    </item>
    
    <item>
      <title>Tracking Pixel Technology with Golang</title>
      <link>https://manuelfedele.github.io/posts/tracking-pixel-technology-email-golang/</link>
      <pubDate>Sun, 22 Jan 2023 19:02:19 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/tracking-pixel-technology-email-golang/</guid>
      <description>Tracking pixels, also known as web beacons, are small transparent images that are used to track the effectiveness of emails. They work by including a unique image in the email that is hosted on a server, and when the email is opened and the image is loaded, it sends a request to the server with information about the email opening. This information can be used to track the effectiveness of the email and see how many people have opened it.</description>
    </item>
    
    <item>
      <title>Evaluate Chess Position With Golang</title>
      <link>https://manuelfedele.github.io/posts/evaluate-chess-position-with-golang/</link>
      <pubDate>Thu, 19 Jan 2023 21:33:41 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/evaluate-chess-position-with-golang/</guid>
      <description>Evaluating chess positions is an important part of chess strategy and can help players make more informed decisions about which moves to make. In this blog post, we&amp;rsquo;ll look at how to use the powerful Stockfish chess engine and the Go programming language to evaluate chess positions.
Installing Stockfish Before we can start using Stockfish, we need to install it. On Linux and macOS, you can install Stockfish using the package manager of your choice (e.</description>
    </item>
    
    <item>
      <title>The Memoization Technique</title>
      <link>https://manuelfedele.github.io/posts/the-memoization-technique/</link>
      <pubDate>Mon, 16 Jan 2023 21:07:26 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/the-memoization-technique/</guid>
      <description>Memoization is a technique that is used to speed up the execution of a function by storing the results of expensive function calls and returning the cached result when the same input occurs again. This can be particularly useful for algorithms that have a large number of recursive calls or for functions that are called multiple times with the same input.
In Go, it is easy to implement memoization using a simple map.</description>
    </item>
    
    <item>
      <title>Trading With Alpaca and Golang</title>
      <link>https://manuelfedele.github.io/posts/trading-with-alpaca-and-golang/</link>
      <pubDate>Sun, 15 Jan 2023 19:24:09 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/trading-with-alpaca-and-golang/</guid>
      <description>Alpaca is a popular platform for automated trading, offering APIs for accessing real-time market data and placing trades. In this article, we will discuss how to use Alpaca&amp;rsquo;s APIs with Golang, a popular programming language known for its simplicity, performance, and concurrency support.
Before we dive into the details of using Alpaca&amp;rsquo;s APIs with Golang, let&amp;rsquo;s first understand the requirements of the application.
Requirements The application should be able to connect to the Alpaca API and authenticate the user.</description>
    </item>
    
    <item>
      <title>A Quick Overview of Elasticsearch</title>
      <link>https://manuelfedele.github.io/posts/a-quick-overview-of-elasticsearch/</link>
      <pubDate>Fri, 13 Jan 2023 17:24:25 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/a-quick-overview-of-elasticsearch/</guid>
      <description>Introduction Elastic, also known as Elasticsearch, is a powerful search and analytics engine that can be used to index, search, and analyze large volumes of data quickly and in near real-time. It is open-source and built on top of the Lucene library. In this blog post, we will go over the basics of Elastic and how to get started using it.
Installation The first step to using Elastic is to install it on your system.</description>
    </item>
    
    <item>
      <title>Unit Testing in Golang</title>
      <link>https://manuelfedele.github.io/posts/unit-testing-in-golang/</link>
      <pubDate>Mon, 09 Jan 2023 20:49:03 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/unit-testing-in-golang/</guid>
      <description>Unit testing is a software testing technique in which individual units (smallest testable parts) of a software application are tested in isolation from the rest of the application. The goal of unit testing is to validate that each unit of the application is working as intended and meets the specified requirements.
In Go, the testing package provides support for writing unit tests. To write unit tests, you need to create a file with a name that ends in _test.</description>
    </item>
    
    <item>
      <title>What Is the Difference Between Git Pull and Git Fetch</title>
      <link>https://manuelfedele.github.io/posts/what-is-the-difference-between-git-pull-and-git-fetch/</link>
      <pubDate>Sun, 08 Jan 2023 17:16:40 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/what-is-the-difference-between-git-pull-and-git-fetch/</guid>
      <description>Git is a version control system that is widely used in software development to track and manage changes to source code. Two of the most common Git commands that developers use to retrieve updates from a remote repository are git pull and git fetch. While these two commands may seem similar at first glance, they have some important differences that are worth understanding.
The git pull command is a combination of git fetch and git merge.</description>
    </item>
    
    <item>
      <title>Streaming Video With Golang</title>
      <link>https://manuelfedele.github.io/posts/streaming-video-with-golang/</link>
      <pubDate>Wed, 04 Jan 2023 21:23:20 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/streaming-video-with-golang/</guid>
      <description>Streaming video with Go (Golang) is a popular choice for building efficient and scalable video streaming applications. In this blog post, we&amp;rsquo;ll discuss some of the key concepts and considerations for building a video streaming application with Go.
One of the first things to consider when building a video streaming application is the underlying video format. Go has built-in support for working with a variety of video formats, including MP4, FLV, and AVI.</description>
    </item>
    
    <item>
      <title>Use Protobuf With Fastapi</title>
      <link>https://manuelfedele.github.io/posts/use-protobuf-with-fastapi/</link>
      <pubDate>Wed, 04 Jan 2023 16:00:43 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/use-protobuf-with-fastapi/</guid>
      <description>Protocol buffers, also known as Protobuf, are a popular data serialization format used for communication between services. They are efficient, easy to use, and language-agnostic. In this article, we will look at how to use Protobuf with FastAPI, a modern, high-performance web framework for building APIs with Python.
First, let&amp;rsquo;s start by installing the necessary dependencies. You will need to install fastapi, google-protobuf, and grpcio. You can do this by running the following command:</description>
    </item>
    
    <item>
      <title>The Context Package</title>
      <link>https://manuelfedele.github.io/posts/the-context-package/</link>
      <pubDate>Tue, 03 Jan 2023 20:36:29 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/the-context-package/</guid>
      <description>Context in Go is a type that carries a request-scoped value across API boundaries. It is designed to be used in long-lived requests, such as an HTTP server handling multiple requests over the lifetime of a process.
One of the primary use cases of context is to cancel long-running operations. For example, if an HTTP server receives a request with a cancelation token, it can use that token to cancel the request if the client closes the connection.</description>
    </item>
    
    <item>
      <title>Understand Async Await in Python</title>
      <link>https://manuelfedele.github.io/posts/understand-async-await-in-python/</link>
      <pubDate>Sun, 01 Jan 2023 14:50:35 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/understand-async-await-in-python/</guid>
      <description>Async/await is a powerful programming construct that allows you to write asynchronous code in a synchronous-like style. It was introduced in Python 3.5 as part of the asyncio module and has become a popular choice for writing concurrent and parallel code in Python.
In this post, we&amp;rsquo;ll take a look at what async/await is and how it works, as well as some of the benefits and drawbacks of using it. We&amp;rsquo;ll also see some examples of how to use async/await in Python to write efficient and scalable code.</description>
    </item>
    
    <item>
      <title>Create a Telegram Bot With Rust</title>
      <link>https://manuelfedele.github.io/posts/create-a-telegram-bot-with-rust/</link>
      <pubDate>Sat, 31 Dec 2022 14:26:23 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-a-telegram-bot-with-rust/</guid>
      <description>Install Rust Before you can start writing Rust code, you&amp;rsquo;ll need to install the Rust programming language on your computer. You can do this by following the instructions on the Rust website (https://www.rust-lang.org/tools/install).
Set up a new Rust project Once you have Rust installed, you&amp;rsquo;ll need to create a new Rust project using the cargo command-line tool. Open a terminal and navigate to the directory where you want to store your project, then run the following command: cargo new telegram-bot &amp;ndash;bin.</description>
    </item>
    
    <item>
      <title>Create a Webserver With Fastapi and Uvicorn</title>
      <link>https://manuelfedele.github.io/posts/create-webserver-with-fastapi-and-uvicorn/</link>
      <pubDate>Fri, 30 Dec 2022 14:08:35 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-webserver-with-fastapi-and-uvicorn/</guid>
      <description>FastAPI is a modern, fast, web framework for building APIs with Python 3.7 and above. It is built on top of Starlette, a lightweight ASGI framework, and uses the uvicorn ASGI server.
Here is an example of how to create a web server with FastAPI and uvicorn:
Install FastAPI and uvicorn using pip: pip install fastapi uvicorn Create a file called main.py and import FastAPI: from fastapi import FastAPI app = FastAPI() Define a function that will be the endpoint for your API.</description>
    </item>
    
    <item>
      <title>What Does Yield Keyword Do in Python</title>
      <link>https://manuelfedele.github.io/posts/what-does-yield-keyword-do-in-python/</link>
      <pubDate>Thu, 29 Dec 2022 10:19:25 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/what-does-yield-keyword-do-in-python/</guid>
      <description>The keyword &amp;ldquo;yield&amp;rdquo; is a important part of the Python programming language, and it can be used in a number of different ways. In this article, we&amp;rsquo;ll take a closer look at what the yield keyword does in Python, and how it can be used to create more efficient and powerful programs.
The primary use of the yield keyword is to create a generator function. A generator function is a special type of function that produces a sequence of values, one at a time, when it is called.</description>
    </item>
    
    <item>
      <title>Use Protobuf With Golang</title>
      <link>https://manuelfedele.github.io/posts/use-protobuf-with-golang/</link>
      <pubDate>Tue, 27 Dec 2022 18:48:44 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/use-protobuf-with-golang/</guid>
      <description>Protocol Buffers (Protobuf) is a language- and platform-neutral data serialization format developed by Google. It allows you to define data structures in a .proto file and then use code generation tools to generate code in various languages for working with those data structures.
To use Protobuf with Go, you&amp;rsquo;ll need to do the following:
Install the Protobuf compiler (protoc) and the Go Protobuf plugin:
# Install protoc wget https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip unzip protoc-3.</description>
    </item>
    
    <item>
      <title>Create Command Line Application With Golang</title>
      <link>https://manuelfedele.github.io/posts/create-command-line-application-with-golang/</link>
      <pubDate>Tue, 20 Dec 2022 10:03:30 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-command-line-application-with-golang/</guid>
      <description>Creating a Command Line Application to Separate Files by Extension in Go If you have a folder with a large number of files and you want to organize them by file extension, you can create a command line application to do this automatically using Go. Go, also known as Golang, is a programming language developed by Google that is designed to be fast, statically-typed, and easy to learn. In this article, we&amp;rsquo;ll walk through the steps to create a Go program that separates files in a given folder into subfolders based on their extension.</description>
    </item>
    
    <item>
      <title>Create Website With Gatsby and Github Pages</title>
      <link>https://manuelfedele.github.io/posts/create-website-with-gatsby-and-github-pages/</link>
      <pubDate>Tue, 20 Dec 2022 09:49:01 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-website-with-gatsby-and-github-pages/</guid>
      <description>GitHub Pages is a free service that allows you to host your website directly from a GitHub repository. It is a great platform for developers to showcase their portfolio, document their projects, or create a personal blog. In this article, we will walk through the steps of creating a static website using GitHub Pages and Gatsby, a popular static site generator.
Install Gatsby First, you will need to install Gatsby by running the following command in your terminal: npm install -g gatsby-cli Create a new Gatsby project gatsby new my-website This will create a new directory called my-website with the necessary files and dependencies for your Gatsby project.</description>
    </item>
    
    <item>
      <title>Use Redis With Golang</title>
      <link>https://manuelfedele.github.io/posts/use-redis-with-golang/</link>
      <pubDate>Mon, 19 Dec 2022 19:32:27 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/use-redis-with-golang/</guid>
      <description>Using Golang and Redis Redis is an in-memory data structure store that can be used as a database, cache, and message broker. It is known for its speed, simplicity, and flexibility. In this article, we will discuss how to use Redis with Golang, a popular programming language known for its simplicity, performance, and concurrency support.
Before we dive into the details of using Redis with Golang, let&amp;rsquo;s first understand the requirements of the application.</description>
    </item>
    
    <item>
      <title>Create Desktop Application to fetch Stock Market Data  with Golang</title>
      <link>https://manuelfedele.github.io/posts/create-desktop-application-stock-market-data-golang/</link>
      <pubDate>Mon, 19 Dec 2022 19:08:58 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-desktop-application-stock-market-data-golang/</guid>
      <description>Golang, also known as Go, is a popular programming language known for its simplicity, performance, and concurrency support. Fyne is an open-source cross-platform UI toolkit written in Go, which makes it an excellent choice for building desktop applications. In this article, we will discuss how to build a desktop application for stock market data using Golang and Fyne.
Before we dive into the details of building the application, let&amp;rsquo;s first understand the requirements of the application.</description>
    </item>
    
    <item>
      <title>Work with Json field on Postgresql</title>
      <link>https://manuelfedele.github.io/posts/work-with-json-postgresql/</link>
      <pubDate>Mon, 19 Dec 2022 18:20:30 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/work-with-json-postgresql/</guid>
      <description>In PostgreSQL, the json data type can be used to store JSON data. You can use the -&amp;gt; operator to access elements of a JSON object, and the -&amp;raquo; operator to access values of a JSON object as text.
For example, consider the following table with a JSON field called data:
CREATE TABLE documents ( id serial PRIMARY KEY, data json ); To insert a JSON object into the data field, you can use the json_build_object function:</description>
    </item>
    
    <item>
      <title>How to Create a Webserver in Golang</title>
      <link>https://manuelfedele.github.io/posts/how-to-create-a-webserver-in-golang/</link>
      <pubDate>Sun, 11 Dec 2022 19:14:21 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/how-to-create-a-webserver-in-golang/</guid>
      <description>To create a web server in Go, you can use the http package provided by the standard library. This package includes the http.Server type, which represents an HTTP server, and the http.ListenAndServe() function, which listens for incoming HTTP requests on a specified port and serves responses to those requests.
Here is an example of how you might create a simple web server in Go:
// Import the http package import &amp;#34;net/http&amp;#34; // Define a function that will be called to handle incoming HTTP requests func handler(w http.</description>
    </item>
    
    <item>
      <title>How to Use Interfaces in Golang</title>
      <link>https://manuelfedele.github.io/posts/how-to-use-interfaces-in-golang/</link>
      <pubDate>Sun, 11 Dec 2022 19:04:27 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/how-to-use-interfaces-in-golang/</guid>
      <description>In Go, an interface is a type that defines a set of methods that a struct must implement in order to implement the interface. An interface defines the behavior or capabilities of a struct without specifying the implementation details. This allows different structs to implement the same interface in different ways, promoting loose coupling and flexibility in your code.
Here is an example of an interface in Go:
// Define an interface named Animal type Animal interface { // Define a method named Speak that takes no arguments and returns a string Speak() string } In this example, the Animal interface defines a single method named Speak(), which takes no arguments and returns a string.</description>
    </item>
    
    <item>
      <title>Implement Factory Design Pattern in Golang</title>
      <link>https://manuelfedele.github.io/posts/implement-factory-design-pattern-golang/</link>
      <pubDate>Sun, 11 Dec 2022 18:57:13 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/implement-factory-design-pattern-golang/</guid>
      <description>To implement the factory design pattern in Go, you can create a factory function that returns an object that implements a common interface. This function can take parameters to specify the type of object to be created. Here is an example of how you might implement the factory design pattern in Go:
// Define an interface that the factory will create objects for type Animal interface { Speak() string } // Define a factory function that returns an object that implements the Animal interface func NewAnimal(animalType string) Animal { switch animalType { case &amp;#34;dog&amp;#34;: return &amp;amp;Dog{} case &amp;#34;cat&amp;#34;: return &amp;amp;Cat{} default: return nil } } // Define a struct for a dog that implements the Animal interface type Dog struct{} func (d *Dog) Speak() string { return &amp;#34;Woof!</description>
    </item>
    
    <item>
      <title>Create a template for Hugo</title>
      <link>https://manuelfedele.github.io/posts/create-template-hugo/</link>
      <pubDate>Thu, 03 Nov 2022 14:57:41 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/create-template-hugo/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Poetry No Module Seed via App Data</title>
      <link>https://manuelfedele.github.io/posts/poetry-no-module-seed-via-app-data/</link>
      <pubDate>Mon, 01 Nov 2021 15:15:47 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/poetry-no-module-seed-via-app-data/</guid>
      <description>For my last project, I used poetry to manage dependencies and package my code. Poetry comes with all the tools you might need to manage your projects in a deterministic way.
Anyway, after running poetry init in an existing project, I tried to let poetry create a virtuale environment, by adding the first dependecy, but when I did poetry add twisted it suddenly hang out, printing:
No module named &amp;#39;virtualenv.seed.via_app_data&amp;#39; Why is that?</description>
    </item>
    
    <item>
      <title>Amazon Echo Plus as bluetooth speaker on Ubuntu 20.04</title>
      <link>https://manuelfedele.github.io/posts/ubuntu-echo-plus-alexa-workaround-bluetooth-speaker/</link>
      <pubDate>Tue, 14 Apr 2020 09:37:07 +0100</pubDate>
      
      <guid>https://manuelfedele.github.io/posts/ubuntu-echo-plus-alexa-workaround-bluetooth-speaker/</guid>
      <description>TLDR; I just unpaired the devices, then started a YouTube video on my Ubuntu machine and then repeated the steps below (pairing) while the audio was playing. At that point I’ve been able to send audio to my Echo Plus.
Yesterday, I tried to use my Amazon Echo Plus as bluetooth speaker on my media center Running Ubuntu 20.04.
I paired the Echo Plus using Alexa app on my phone following these steps:</description>
    </item>
    
    
  </channel>
</rss>
